import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { CodeUser } from "~/types/UserType";
import { useEffect, useState } from "react";
import { codeRouter } from "~/server/api/routers/codes";
import type { ScratchCode } from "~/types/ScratchCode";
import { api } from "~/utils/api";


export default function Home() {

  const hello = api.post.hello.useQuery({ text: "from aNDY" });

  
  async function runupdate(){
    const newOne = await makeCode.refetch();
    const newList = await initcodes.refetch();
    
    newCode(newOne.data);
    setAllCodes(newList.data);
  }

  async function redeemCode(codeId:number){
    const updatedCode = api.code.redeem.useQuery(codeId);
    await runupdate();
    return updatedCode;
  }

  // define state variables 
  const [lastCode, newCode] = useState<ScratchCode>();
  const [allCodes,setAllCodes] = useState<ScratchCode[]>();

  //init values
  const initcodes = api.code.getAllCodes.useQuery();
  const makeCode = api.code.generateCode.useQuery("500");
  const [trigger,runMake] = useState(0);
  
useEffect(()=>{
    const freshData = async()=>{await runupdate()};
    freshData().catch((error)=>console.log(error))
},[trigger]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            {(makeCode.isLoading || makeCode.isFetching) ? <p className="text-white">Just Having a think...</p> : null}
            
            <CodeGenButton lastCode={lastCode?.code} count={trigger} callback={()=>{runMake(trigger + 1)}} />
            
            <AuthShowcase />
          </div>
          <h3 className="text-white">Here&apos;s a list of all the failed attempts haha</h3>
          {allCodes?.map((code)=>
            <RedeemCode onRedeem={()=>redeemCode(code.id)} owner={code.owner} key={code.id} _id={code.id} code={code.code} ></RedeemCode>
          )}
        
        </div>
      </main>
    </>
  );
}

type RedeemData = { 
  _id:number;
  code:string;
  owner?:CodeUser;
  onRedeem:()=>void;
}

function RedeemCode(Props:RedeemData){

  return <>
  {
  Props.owner ?
    <button key={Props._id} className="text-white disabled">{Props.code}: Already Redeemed by {Props.owner.name}</button>
  :
    <button key={Props._id} className="text-white">{Props.code}</button>
  }
  </>

}

// make sure the button's data is hunky-dory
type ButtonData = {
  callback:()=>void;
  lastCode?:string;
  count:number;
}

export function CodeGenButton(props:ButtonData){
  // function that generates a new code then updates the state 
  const update = props.callback;
  // the value that is to be displayed
  const code = props.lastCode;

  return <>
          <button className="text-white" onClick={update}>Make A Code!</button>
          <p className="text-white">{code}</p>
          <p className="text-white">You have made {props.count} codes this session</p>
        </>

}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.post.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}
